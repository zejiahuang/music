name: Build and Release musicplayer (Windows)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  QT_VERSION: '5.15.2'
  VCPKG_DIR: '${{ github.workspace }}/vcpkg'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          install-deps: true

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git ${{ env.VCPKG_DIR }}
          & "${{ env.VCPKG_DIR }}\bootstrap-vcpkg.bat" -disableMetrics

      - name: Install dependencies with vcpkg
        run: |
          # 取消设置可能冲突的环境变量
          $env:VCPKG_ROOT = $null
          & "${{ env.VCPKG_DIR }}\vcpkg.exe" install taglib:x64-windows ffmpeg:x64-windows pkgconf:x64-windows

      - name: Setup environment variables
        run: |
          echo "VCPKG_ROOT=${{ env.VCPKG_DIR }}" >> $env:GITHUB_ENV
          echo "PATH=${{ env.VCPKG_DIR }}\installed\x64-windows\bin;$env:PATH" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: |
          # 使用正确的路径分隔符
          $toolchainFile = "${{ env.VCPKG_DIR }}\scripts\buildsystems\vcpkg.cmake"
          cmake -B build -S . `
            -DCMAKE_TOOLCHAIN_FILE="$toolchainFile" `
            -DCMAKE_PREFIX_PATH="$env:QT5_DIR;${{ env.VCPKG_DIR }}\installed\x64-windows" `
            -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Test build output
        run: |
          if (Test-Path "build/Release/musicplayer.exe") {
            Write-Host "✓ Build successful - musicplayer.exe found"
          } else {
            Write-Host "✗ Build failed - musicplayer.exe not found"
            Get-ChildItem -Path build -Recurse -Name
            exit 1
          }

      - name: Collect dependencies
        run: |
          # 创建发布目录
          New-Item -ItemType Directory -Path "release" -Force
          
          # 复制主程序
          Copy-Item "build/Release/musicplayer.exe" -Destination "release/"
          
          # 复制Qt依赖
          $qtBinPath = "$env:QT5_DIR/bin"
          & "$env:QT5_DIR/bin/windeployqt.exe" --release --no-compiler-runtime --no-translations release/musicplayer.exe
          
          # 复制vcpkg依赖
          $vcpkgBinPath = "${{ env.VCPKG_DIR }}\installed\x64-windows\bin"
          Copy-Item "$vcpkgBinPath/tag.dll" -Destination "release/"
          Copy-Item "$vcpkgBinPath/avcodec-*.dll" -Destination "release/"
          Copy-Item "$vcpkgBinPath/avformat-*.dll" -Destination "release/"
          Copy-Item "$vcpkgBinPath/avutil-*.dll" -Destination "release/"
          Copy-Item "$vcpkgBinPath/swresample-*.dll" -Destination "release/"
          
          # 复制资源文件
          if (Test-Path "src/resources") {
            Copy-Item -Path "src/resources" -Destination "release/" -Recurse -Force
          }

      - name: Create release package
        run: |
          $version = git describe --tags --abbrev=0
          if (-not $version) {
            $version = "dev"
          }
          
          $zipName = "musicplayer-windows-$version.zip"
          Compress-Archive -Path "release/*" -DestinationPath $zipName
          
          Write-Host "Created release package: $zipName"
          Get-ChildItem -Path $zipName

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: musicplayer-windows-${{ github.ref_name }}
          path: musicplayer-windows-*.zip

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: musicplayer-windows-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
